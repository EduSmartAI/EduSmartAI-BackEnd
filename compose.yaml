services:
  # API Services
  studentservice.api:
    build:
      context: .
      dockerfile: Services/StudentService/StudentService.API/Dockerfile
    ports:
      - "7002:80"
    environment:
      - STUDENT_SERVICE_DB=${STUDENT_SERVICE_DB}
      - REDIS_CACHE_CONNECTION=${REDIS_CACHE_CONNECTION}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - ENCRYPTION_IV=${ENCRYPTION_IV}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - STUDENT_SERVICE_URL=${STUDENT_SERVICE_URL}
    networks:
      - edusmartai-network

  authservice.api:
    build:
      context: .
      dockerfile: Services/AuthService/AuthService.API/Dockerfile
    ports:
      - "7001:80"
    environment:
      - AUTH_SERVICE_DB=${AUTH_SERVICE_DB}
      - REDIS_CACHE_CONNECTION=${REDIS_CACHE_CONNECTION}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - JWT_AUDIENCE=${JWT_AUDIENCE}
      - CLIENT_ID=${CLIENT_ID}
      - CLIENT_SECRET=${CLIENT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - ENCRYPTION_IV=${ENCRYPTION_IV}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - STUDENT_SERVICE_URL=${STUDENT_SERVICE_URL}
    networks:
      - edusmartai-network
  # Gateway
  reverseproxy:
    build:
      context: .
      dockerfile: Gateways/ReverseProxy/Dockerfile
    ports:
      - "7000:80"
    depends_on:
      - studentservice.api
      - authservice.api
    networks:
      - edusmartai-network
    environment:
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - STUDENT_SERVICE_URL=${STUDENT_SERVICE_URL}
      - CLIENT_ID=${CLIENT_ID}
      - CLIENT_SECRET=${CLIENT_SECRET}
      - JWT_AUDIENCE=${JWT_AUDIENCE}


# Networks
networks:
  edusmartai-network:
    driver: bridge

# Volumes
volumes:
  postgres_data:
  redis_data:
  rabbitmq_data: