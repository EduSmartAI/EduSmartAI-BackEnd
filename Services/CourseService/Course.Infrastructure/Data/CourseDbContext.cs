// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using BaseService.Infrastructure.Contexts;
using Course.Domain.Models;
using Microsoft.EntityFrameworkCore;

namespace Course.Infrastructure.Data;


public partial class CourseDbContext : AppDbContext
{
    public CourseDbContext(DbContextOptions<CourseDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<CourseEntity> Courses { get; set; }

    public virtual DbSet<CourseComment> CourseComments { get; set; }

    public virtual DbSet<CourseRating> CourseRatings { get; set; }

    public virtual DbSet<CourseRecommendation> CourseRecommendations { get; set; }

    public virtual DbSet<CourseTag> CourseTags { get; set; }

    public virtual DbSet<Lesson> Lessons { get; set; }

    public virtual DbSet<Major> Majors { get; set; }

    public virtual DbSet<Module> Modules { get; set; }

    public virtual DbSet<Note> Notes { get; set; }

    public virtual DbSet<Semester> Semesters { get; set; }

    public virtual DbSet<Subject> Subjects { get; set; }

    public virtual DbSet<Syllabus> Syllabi { get; set; }

    public virtual DbSet<SyllabusSemester> SyllabusSemesters { get; set; }

    public virtual DbSet<SyllabusSubject> SyllabusSubjects { get; set; }

    public virtual DbSet<Tag> Tags { get; set; }

    public virtual DbSet<UserLessonProgress> UserLessonProgresses { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.HasPostgresExtension("pgcrypto");

        modelBuilder.Entity<CourseEntity>(entity =>
        {
            entity.HasKey(e => e.CourseId).HasName("courses_pkey");

            entity.ToTable("courses");

            entity.HasIndex(e => e.IsActive, "idx_courses_is_active");

            entity.HasIndex(e => e.SubjectId, "idx_courses_subject");

            entity.HasIndex(e => e.TeacherId, "idx_courses_teacher");

            entity.Property(e => e.CourseId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("course_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .HasColumnName("created_by");
            entity.Property(e => e.DealPrice)
                .HasPrecision(10, 2)
                .HasColumnName("deal_price");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.DurationMinutes).HasColumnName("duration_minutes");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("is_active");
            entity.Property(e => e.Level).HasColumnName("level");
            entity.Property(e => e.Price)
                .HasPrecision(10, 2)
                .HasColumnName("price");
            entity.Property(e => e.SubjectId).HasColumnName("subject_id");
            entity.Property(e => e.TeacherId).HasColumnName("teacher_id");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("title");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .HasColumnName("updated_by");

            entity.HasOne(d => d.Subject).WithMany(p => p.Courses)
                .HasForeignKey(d => d.SubjectId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("fk_courses_subject");
        });

        modelBuilder.Entity<CourseComment>(entity =>
        {
            entity.HasKey(e => e.CommentId).HasName("course_comments_pkey");

            entity.ToTable("course_comments");

            entity.HasIndex(e => e.CourseId, "idx_comments_course");

            entity.HasIndex(e => e.IsActive, "idx_comments_is_active");

            entity.HasIndex(e => e.ParentCommentId, "idx_comments_parent");

            entity.Property(e => e.CommentId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("comment_id");
            entity.Property(e => e.Content)
                .IsRequired()
                .HasColumnName("content");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("is_active");
            entity.Property(e => e.ParentCommentId).HasColumnName("parent_comment_id");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Course).WithMany(p => p.CourseComments)
                .HasForeignKey(d => d.CourseId)
                .HasConstraintName("fk_comments_course");

            entity.HasOne(d => d.ParentComment).WithMany(p => p.InverseParentComment)
                .HasForeignKey(d => d.ParentCommentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_comments_parent");
        });

        modelBuilder.Entity<CourseRating>(entity =>
        {
            entity.HasKey(e => e.RatingId).HasName("course_ratings_pkey");

            entity.ToTable("course_ratings");

            entity.HasIndex(e => e.CourseId, "idx_ratings_course");

            entity.HasIndex(e => e.UserId, "idx_ratings_user");

            entity.HasIndex(e => new { e.CourseId, e.UserId }, "uq_ratings_course_user").IsUnique();

            entity.Property(e => e.RatingId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("rating_id");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.Rating).HasColumnName("rating");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Course).WithMany(p => p.CourseRatings)
                .HasForeignKey(d => d.CourseId)
                .HasConstraintName("fk_ratings_course");
        });

        modelBuilder.Entity<CourseRecommendation>(entity =>
        {
            entity.HasKey(e => e.RecommendationId).HasName("course_recommendations_pkey");

            entity.ToTable("course_recommendations");

            entity.HasIndex(e => e.CourseId, "idx_reco_course");

            entity.HasIndex(e => e.UserId, "idx_reco_user");

            entity.HasIndex(e => new { e.UserId, e.CourseId, e.AlgoVersion }, "uq_reco_user_course_algo").IsUnique();

            entity.Property(e => e.RecommendationId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("recommendation_id");
            entity.Property(e => e.AlgoVersion)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("algo_version");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.ReasonJson)
                .HasColumnType("jsonb")
                .HasColumnName("reason_json");
            entity.Property(e => e.Score)
                .HasPrecision(6, 4)
                .HasColumnName("score");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Course).WithMany(p => p.CourseRecommendations)
                .HasForeignKey(d => d.CourseId)
                .HasConstraintName("fk_reco_course");
        });

        modelBuilder.Entity<CourseTag>(entity =>
        {
            entity.HasKey(e => new { e.CourseId, e.TagId }).HasName("course_tags_pkey");

            entity.ToTable("course_tags");

            entity.HasIndex(e => e.TagId, "idx_course_tags_tag");

            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.TagId).HasColumnName("tag_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");

            entity.HasOne(d => d.Course).WithMany(p => p.CourseTags)
                .HasForeignKey(d => d.CourseId)
                .HasConstraintName("fk_course_tags_course");

            entity.HasOne(d => d.Tag).WithMany(p => p.CourseTags)
                .HasForeignKey(d => d.TagId)
                .HasConstraintName("fk_course_tags_tag");
        });

        modelBuilder.Entity<Lesson>(entity =>
        {
            entity.HasKey(e => e.LessonId).HasName("lessons_pkey");

            entity.ToTable("lessons");

            entity.HasIndex(e => e.IsActive, "idx_lessons_is_active");

            entity.HasIndex(e => e.ModuleId, "idx_lessons_module");

            entity.HasIndex(e => new { e.ModuleId, e.PositionIndex }, "uq_lessons_module_position").IsUnique();

            entity.Property(e => e.LessonId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("lesson_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .HasColumnName("created_by");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("is_active");
            entity.Property(e => e.ModuleId).HasColumnName("module_id");
            entity.Property(e => e.PositionIndex).HasColumnName("position_index");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(200)
                .HasColumnName("title");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .HasColumnName("updated_by");
            entity.Property(e => e.VideoDurationSec).HasColumnName("video_duration_sec");
            entity.Property(e => e.VideoUrl).HasColumnName("video_url");

            entity.HasOne(d => d.Module).WithMany(p => p.Lessons)
                .HasForeignKey(d => d.ModuleId)
                .HasConstraintName("fk_lessons_module");
        });

        modelBuilder.Entity<Major>(entity =>
        {
            entity.HasKey(e => e.MajorId).HasName("majors_pkey");

            entity.ToTable("majors");

            entity.HasIndex(e => e.MajorCode, "majors_major_code_key").IsUnique();

            entity.Property(e => e.MajorId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("major_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("is_active");
            entity.Property(e => e.MajorCode)
                .IsRequired()
                .HasMaxLength(15)
                .HasColumnName("major_code");
            entity.Property(e => e.MajorName)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("major_name");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");
        });

        modelBuilder.Entity<Module>(entity =>
        {
            entity.HasKey(e => e.ModuleId).HasName("modules_pkey");

            entity.ToTable("modules");

            entity.HasIndex(e => e.CourseId, "idx_modules_course");

            entity.HasIndex(e => e.IsActive, "idx_modules_is_active");

            entity.HasIndex(e => new { e.CourseId, e.PositionIndex }, "uq_modules_course_position").IsUnique();

            entity.Property(e => e.ModuleId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("module_id");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .HasColumnName("created_by");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("is_active");
            entity.Property(e => e.ModuleName)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("module_name");
            entity.Property(e => e.PositionIndex).HasColumnName("position_index");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .HasColumnName("updated_by");

            entity.HasOne(d => d.Course).WithMany(p => p.Modules)
                .HasForeignKey(d => d.CourseId)
                .HasConstraintName("fk_modules_course");
        });

        modelBuilder.Entity<Note>(entity =>
        {
            entity.HasKey(e => e.NoteId).HasName("notes_pkey");

            entity.ToTable("notes");

            entity.HasIndex(e => e.IsDeleted, "idx_notes_is_deleted");

            entity.HasIndex(e => e.LessonId, "idx_notes_lesson");

            entity.HasIndex(e => e.UserId, "idx_notes_user");

            entity.Property(e => e.NoteId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("note_id");
            entity.Property(e => e.Content)
                .IsRequired()
                .HasColumnName("content");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.IsDeleted)
                .HasDefaultValue(false)
                .HasColumnName("is_deleted");
            entity.Property(e => e.LessonId).HasColumnName("lesson_id");
            entity.Property(e => e.TimeSeconds).HasColumnName("time_seconds");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Lesson).WithMany(p => p.Notes)
                .HasForeignKey(d => d.LessonId)
                .HasConstraintName("fk_notes_lesson");
        });

        modelBuilder.Entity<Semester>(entity =>
        {
            entity.HasKey(e => e.SemesterId).HasName("semesters_pkey");

            entity.ToTable("semesters");

            entity.HasIndex(e => e.SemesterCode, "semesters_semester_code_key").IsUnique();

            entity.Property(e => e.SemesterId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("semester_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.SemesterCode)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("semester_code");
            entity.Property(e => e.SemesterName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("semester_name");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");
        });

        modelBuilder.Entity<Subject>(entity =>
        {
            entity.HasKey(e => e.SubjectId).HasName("subjects_pkey");

            entity.ToTable("subjects");

            entity.HasIndex(e => e.SubjectCode, "subjects_subject_code_key").IsUnique();

            entity.Property(e => e.SubjectId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("subject_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .HasColumnName("created_by");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("is_active");
            entity.Property(e => e.SubjectCode)
                .IsRequired()
                .HasMaxLength(15)
                .HasColumnName("subject_code");
            entity.Property(e => e.SubjectName)
                .IsRequired()
                .HasMaxLength(200)
                .HasColumnName("subject_name");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .HasColumnName("updated_by");

            entity.HasMany(d => d.PrereqSubjects).WithMany(p => p.Subjects)
                .UsingEntity<Dictionary<string, object>>(
                    "SubjectPrerequisite",
                    r => r.HasOne<Subject>().WithMany()
                        .HasForeignKey("PrereqSubjectId")
                        .HasConstraintName("fk_subject_prereq_prereq"),
                    l => l.HasOne<Subject>().WithMany()
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_subject_prereq_subject"),
                    j =>
                    {
                        j.HasKey("SubjectId", "PrereqSubjectId").HasName("subject_prerequisites_pkey");
                        j.ToTable("subject_prerequisites");
                        j.IndexerProperty<Guid>("SubjectId").HasColumnName("subject_id");
                        j.IndexerProperty<Guid>("PrereqSubjectId").HasColumnName("prereq_subject_id");
                    });

            entity.HasMany(d => d.Subjects).WithMany(p => p.PrereqSubjects)
                .UsingEntity<Dictionary<string, object>>(
                    "SubjectPrerequisite",
                    r => r.HasOne<Subject>().WithMany()
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_subject_prereq_subject"),
                    l => l.HasOne<Subject>().WithMany()
                        .HasForeignKey("PrereqSubjectId")
                        .HasConstraintName("fk_subject_prereq_prereq"),
                    j =>
                    {
                        j.HasKey("SubjectId", "PrereqSubjectId").HasName("subject_prerequisites_pkey");
                        j.ToTable("subject_prerequisites");
                        j.IndexerProperty<Guid>("SubjectId").HasColumnName("subject_id");
                        j.IndexerProperty<Guid>("PrereqSubjectId").HasColumnName("prereq_subject_id");
                    });
        });

        modelBuilder.Entity<Syllabus>(entity =>
        {
            entity.HasKey(e => e.SyllabusId).HasName("syllabus_pkey");

            entity.ToTable("syllabus");

            entity.HasIndex(e => e.IsActive, "idx_syllabus_active");

            entity.HasIndex(e => e.MajorId, "idx_syllabus_major");

            entity.HasIndex(e => new { e.MajorId, e.VersionLabel }, "uq_syllabus_major_version").IsUnique();

            entity.Property(e => e.SyllabusId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("syllabus_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.EffectiveFrom).HasColumnName("effective_from");
            entity.Property(e => e.EffectiveTo).HasColumnName("effective_to");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("is_active");
            entity.Property(e => e.MajorId).HasColumnName("major_id");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");
            entity.Property(e => e.VersionLabel)
                .IsRequired()
                .HasMaxLength(30)
                .HasColumnName("version_label");

            entity.HasOne(d => d.Major).WithMany(p => p.Syllabi)
                .HasForeignKey(d => d.MajorId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("fk_syllabus_major");
        });

        modelBuilder.Entity<SyllabusSemester>(entity =>
        {
            entity.HasKey(e => new { e.SyllabusId, e.SemesterId }).HasName("syllabus_semesters_pkey");

            entity.ToTable("syllabus_semesters");

            entity.HasIndex(e => new { e.SyllabusId, e.PositionIndex }, "uq_ss_order").IsUnique();

            entity.Property(e => e.SyllabusId).HasColumnName("syllabus_id");
            entity.Property(e => e.SemesterId).HasColumnName("semester_id");
            entity.Property(e => e.PositionIndex).HasColumnName("position_index");

            entity.HasOne(d => d.Semester).WithMany(p => p.SyllabusSemesters)
                .HasForeignKey(d => d.SemesterId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("fk_ss_semester");

            entity.HasOne(d => d.Syllabus).WithMany(p => p.SyllabusSemesters)
                .HasForeignKey(d => d.SyllabusId)
                .HasConstraintName("fk_ss_syllabus");
        });

        modelBuilder.Entity<SyllabusSubject>(entity =>
        {
            entity.HasKey(e => new { e.SyllabusId, e.SemesterId, e.SubjectId }).HasName("syllabus_subjects_pkey");

            entity.ToTable("syllabus_subjects");

            entity.HasIndex(e => e.SemesterId, "idx_sls_semester");

            entity.HasIndex(e => e.SubjectId, "idx_sls_subject");

            entity.Property(e => e.SyllabusId).HasColumnName("syllabus_id");
            entity.Property(e => e.SemesterId).HasColumnName("semester_id");
            entity.Property(e => e.SubjectId).HasColumnName("subject_id");
            entity.Property(e => e.Credit).HasColumnName("credit");
            entity.Property(e => e.IsMandatory)
                .HasDefaultValue(true)
                .HasColumnName("is_mandatory");
            entity.Property(e => e.PositionIndex)
                .HasDefaultValue(1)
                .HasColumnName("position_index");

            entity.HasOne(d => d.Semester).WithMany(p => p.SyllabusSubjects)
                .HasForeignKey(d => d.SemesterId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("fk_sls_semester");

            entity.HasOne(d => d.Subject).WithMany(p => p.SyllabusSubjects)
                .HasForeignKey(d => d.SubjectId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("fk_sls_subject");

            entity.HasOne(d => d.Syllabus).WithMany(p => p.SyllabusSubjects)
                .HasForeignKey(d => d.SyllabusId)
                .HasConstraintName("fk_sls_syllabus");
        });

        modelBuilder.Entity<Tag>(entity =>
        {
            entity.HasKey(e => e.TagId).HasName("tags_pkey");

            entity.ToTable("tags");

            entity.HasIndex(e => e.TagName, "tags_tag_name_key").IsUnique();

            entity.Property(e => e.TagId).HasColumnName("tag_id");
            entity.Property(e => e.TagName)
                .IsRequired()
                .HasMaxLength(30)
                .HasColumnName("tag_name");
        });

        modelBuilder.Entity<UserLessonProgress>(entity =>
        {
            entity.HasKey(e => e.UserLessonProgressId).HasName("user_lesson_progress_pkey");

            entity.ToTable("user_lesson_progress");

            entity.HasIndex(e => e.LessonId, "idx_progress_lesson");

            entity.HasIndex(e => e.UserId, "idx_progress_user");

            entity.HasIndex(e => new { e.UserId, e.LessonId }, "uq_progress_user_lesson").IsUnique();

            entity.Property(e => e.UserLessonProgressId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("user_lesson_progress_id");
            entity.Property(e => e.CompletedAt).HasColumnName("completed_at");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DurationWatchedSec)
                .HasDefaultValue(0)
                .HasColumnName("duration_watched_sec");
            entity.Property(e => e.LessonId).HasColumnName("lesson_id");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Lesson).WithMany(p => p.UserLessonProgresses)
                .HasForeignKey(d => d.LessonId)
                .HasConstraintName("fk_progress_lesson");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}